"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CCommentParser = void 0;
const iter_tools_es_1 = require("iter-tools-es");
const rd_parse_1 = require("@conartist6/rd-parse");
const defaultContent = [
    'This file is autogenerated. Please do not edit it directly.',
    'When editing run `npx macrome watch` then change the file this is generated from.',
].join('\n');
const _ = rd_parse_1.Optional(rd_parse_1.Ignore(/[ \t]+/));
const key = /[a-zA-Z-]+/;
const value = /([^*\n]|\*(?!\/))*/;
const annotation = rd_parse_1.Node(rd_parse_1.All(_, rd_parse_1.Optional('*'), _, '@', key, _, rd_parse_1.Optional(value), _, rd_parse_1.Optional('\n')), ([key, value]) => [key, value.trimEnd() || true]);
const annotations = rd_parse_1.Node(rd_parse_1.Star(annotation), (entries) => new Map(entries));
const commentLinePrefix = / *\* ?/;
const commentLineContent = /([^*\n]|\*(?!\/))*/; // allow * but not */
const commentLine = rd_parse_1.All(rd_parse_1.Optional(rd_parse_1.Ignore(commentLinePrefix)), commentLineContent, '\n');
const commentLines = rd_parse_1.Node(rd_parse_1.All(rd_parse_1.Star(commentLine)), (commentLines) => commentLines);
const comment = rd_parse_1.Node(rd_parse_1.All(_, '/*', annotations, commentLines, rd_parse_1.Optional(/ */), '*/', _), ([annotations, commentLines]) => ({ annotations, content: commentLines.join('\n') }));
function renderAnnotation([key, value]) {
    return `@${key}${value === true ? '' : ` ${value}`}`;
}
class CCommentParser {
    constructor() {
        this._parser = new rd_parse_1.Parser(comment);
    }
    parse(text) {
        return this._parser.parse(text);
    }
    print({ annotations, content = defaultContent }) {
        const body = iter_tools_es_1.execPipe(annotations, iter_tools_es_1.map((ann) => ` * ${renderAnnotation(ann)}`), iter_tools_es_1.joinWithSeq('\n'), iter_tools_es_1.str);
        const comments = content.length
            ? '\n' +
                content
                    .split('\n')
                    .map((l) => ` * ${l}`)
                    .join('\n')
            : '';
        return `/${body.slice(1)}${comments}\n */`;
    }
}
exports.CCommentParser = CCommentParser;
